#!/usr/bin/python3
"""
RSA Factoring Challenge
"""

import sys
import time
from math import gcd, isqrt

def pollards_rho(n):
    """
    Implementation of Pollard's Rho algorithm
    for integer factorization.
    """
    if n % 2 == 0:
        return 2
    
    x = 2
    y = 2
    d = 1
    f = lambda x: (x**2 + 1) % n
    
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    
    if d == n:
        return None
    return d

def find_prime_factors(n):
    """
    Find two prime factors of n using a combination
    of trial division and Pollard's Rho algorithm.
    """
    # Check small primes for efficiency
    small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
    for p in small_primes:
        if n % p == 0:
            return p, n // p
    
    # Apply Pollard's Rho for larger factors
    factor = pollards_rho(n)
    if factor:
        return factor, n // factor
    
    # Fallback to trial division for remaining cases
    limit = isqrt(n)
    for index in range(41, limit + 1, 2):
        if n % index == 0:
            return index, n // index
    
    return None

def factorize_rsa(file_path):
    """
    Read a number from a file and attempt to factorize it
    into two prime factors.
    """
    try:
        with open(file_path, 'r') as file:
            n = int(file.read().strip())
    except (IOError, ValueError):
        print(f"Error: Unable to read or parse the file {file_path}")
        return

    start_time = time.time()
    factors = find_prime_factors(n)
    end_time = time.time()

    if factors:
        p, q = factors
        print(f"{n}={p}*{q}")
    else:
        print(f"Unable to factorize {n} within the time limit.")
    
    print(f"Time taken: {end_time - start_time:.6f} seconds")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <file>")
        sys.exit(1)
    
    factorize_rsa(sys.argv[1])
